import * as vscode from "vscode";
import * as fs from "fs";
import * as path from "path";
import { DeadCodeItem } from "../analyzer";
import { Logger } from "../../utils/logging";

/**
 * Default whitelist file name
 */
export const DEFAULT_WHITELIST_FILENAME = "whitelist.py";

/**
 * Generate a whitelist entry for a dead code item
 */
export function generateWhitelistEntry(item: DeadCodeItem): string {
  // Extract module path from file path
  const filePath = item.filePath;
  const fileExt = path.extname(filePath);
  const modulePath = filePath
    .substring(0, filePath.length - fileExt.length)
    .replace(/[\/\\]/g, ".");

  // Generate import statement and whitelist line
  return `from ${modulePath} import ${item.name}\n${item.name}\n`;
}

/**
 * Generate a whitelist file for a list of dead code items
 */
export async function generateWhitelist(
  items: DeadCodeItem[],
  targetPath?: string
): Promise<string | undefined> {
  try {
    // Determine whitelist file path
    const config = vscode.workspace.getConfiguration("deadCodeFinder");
    const whitelistPath = targetPath || config.get<string>("whitelistFile");

    if (!whitelistPath) {
      // If no path specified, ask the user for a location
      const workspaceFolders = vscode.workspace.workspaceFolders;
      if (!workspaceFolders) {
        vscode.window.showErrorMessage("No workspace folder open");
        return undefined;
      }

      const defaultUri = vscode.Uri.file(
        path.join(workspaceFolders[0].uri.fsPath, DEFAULT_WHITELIST_FILENAME)
      );
      const uri = await vscode.window.showSaveDialog({
        defaultUri,
        filters: {
          "Python Files": ["py"],
        },
        title: "Save Whitelist File",
      });

      if (!uri) {
        return undefined;
      }

      return generateWhitelistFile(items, uri.fsPath);
    }

    return generateWhitelistFile(items, whitelistPath);
  } catch (error) {
    Logger.error("Error generating whitelist", error as Error);
    vscode.window.showErrorMessage(
      `Error generating whitelist: ${(error as Error).message}`
    );
    return undefined;
  }
}

/**
 * Generate the actual whitelist file content and write to disk
 */
async function generateWhitelistFile(
  items: DeadCodeItem[],
  filePath: string
): Promise<string> {
  try {
    // Generate whitelist content
    let content = "# Whitelist for Vulture\n";
    content += "# Generated by Dead Code Finder VSCode extension\n\n";

    // Add each item to the whitelist
    const uniqueItems = new Map<string, DeadCodeItem>();
    for (const item of items) {
      uniqueItems.set(item.name, item);
    }

    for (const item of uniqueItems.values()) {
      content += generateWhitelistEntry(item);
    }

    // Write to file
    fs.writeFileSync(filePath, content, "utf8");

    Logger.info(`Generated whitelist at ${filePath}`);
    vscode.window.showInformationMessage(`Whitelist generated at ${filePath}`);

    return filePath;
  } catch (error) {
    Logger.error(`Error writing whitelist to ${filePath}`, error as Error);
    throw error;
  }
}
